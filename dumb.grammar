program -> statements {% id %}

statements
    -> _ statement _ {%
            data => [data[1]]
     %}
    | _ statement _ "\n" statements {%
            data => [data[1],...data[4]]
     %}

statement
    -> var_assignment {% id %}
    | print_statement {% id %}
    | while_loop {% id %}
    | if_statement {% id %}

while_loop -> "while" __ binary_expression _ "[" _ "\n" statements "\n" _ "]" {%
            data => {
                return {
                    type: "while_loop",
                    condition: data[2],
                    body: data[7]
                }
            }
        %}

if_statement -> "if" __ binary_expression _ "[" _ "\n" statements "\n" _ "]" _ elif_statement _ else_statement {%
            data => {
              
                return {
                    type: "if_statement",
                    condition: data[2],
                    body: data[7],
                    elifBody: data[12],
                    else: data[14]
                }
            }
        %}

elif_statement -> null 
    |"elif" __ binary_expression _ "[" _ "\n" statements "\n" _ "]" {% 
            data => {
                return  [{
                        condition: data[2],
                        body: data[7]
                    }]   
            }
    %}
    | elif_statement _ "elif" _ binary_expression _ "[" _ "\n" statements "\n" _ "]" {% 
            data => {
               return  [...(data[0]), { condition: data[4], body: data[9]} ]
            }
    %}
    

else_statement ->  null | "else" _ "[" "\n" statements "\n" _ "]" {% 
            data => {
                return data[4]
            }
%}

print_statement -> "print" __ expression {%
            data => {
                return {
                    type: "print_statement",
                    expression: data[2]
                }
            }
        %}

expression
        -> unary_expression {% id %}
        | binary_expression {% id %}

unary_expression
            -> number {% id %}
            | identifier {% id %}

binary_expression
            -> unary_expression _ operator _ expression {%
            data => {
                return {
                    type: "binary_expression",
                    left: data[0],
                    operator: data[2],
                    right: data[4]
                }
            }
        %}

operator
    -> "+" {% id %}
    | "-" {% id %}
    | "*" {% id %}
    | "/" {% id %}
    | ">" {% id %}
    | "<" {% id %}
    | ">=" {% id %}
    | "<=" {% id %}
    | "=" {% id %}

var_assignment -> identifier _ ":=" _ expression {%
            data => {
                return {
                    type: "var_assignment",
                    varname:data[0],
                    value:data[4]
                }
            }
        %}

identifier -> [a-z]:+ {%
        data => data[0].join("")
%}

number
    -> digits "." digits {%
            data => Number(data[0] + "." + data[2])
        %}
    | digits {%
            data => Number(data[0])
        %}

digits -> [0-9]:+ {%
        data => data[0].join("")
%}

_ -> [^\S]:*

__ -> [^\S]:+